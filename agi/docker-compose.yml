version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg15
    container_name: agi_postgres
    environment:
      POSTGRES_DB: agi_db
      POSTGRES_USER: agi_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agi_user -d agi_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  neo4j:
    image: neo4j:5.15
    container_name: agi_neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_memory_heap_initial__size: "512m"
      NEO4J_dbms_memory_heap_max__size: "1G"
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*,gds.*"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
    ports:
      - "7474:7474"
      - "7687:7687"
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: agi_redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  agi-backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: agi_backend
    environment:
      # Database Connections
      DATABASE_URL: postgresql://agi_user:${POSTGRES_PASSWORD}@postgres:5432/agi_db
      NEO4J_URL: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      
      # External Services
      VOYAGE_API_KEY: ${VOYAGE_API_KEY}
      COHERE_API_KEY: ${COHERE_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # Application Config
      ENVIRONMENT: development
      LOG_LEVEL: INFO
      CORS_ORIGINS: "http://localhost:3000"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs

  agi-frontend:
    build:
      context: ./frontend/src
      dockerfile: ../Dockerfile
    container_name: agi_frontend
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_ENVIRONMENT: development
      VITE_WS_URL: ws://localhost:8000/ws
    ports:
      - "3000:3000"
    depends_on:
      agi-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - ./frontend/src:/app/src:ro

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  redis_data:

networks:
  default:
    name: agi_network